https://github.com/sudheerj/javascript-interview-questions

1. React
=> React is front-end javascript library
=> it follow component based approach which help in building reusable UI component
=> It uses virtual dom instead of Real dom
=> it follow uni-directional data flow
=> React is libarary NOT FRAMEWORK so, we can easily intigrate with any framework like ANGULAR, VUE etc

=> we can configure it with the use of CDM LINKS
  => Import 2 files => React development js => Core of react
                    => React Dom => using this we can render our source code on web-site as well as on mobile application (like React native)

=> Code
  <div id="root"></div>
  <script>
      const heading = React.createElement("h1",{},"HELLO WORLD")
      const root = ReactDom.createRoot(document.getElementById("root"));
      root.render(heading)
  </script>

=> root reder is helping to convert react object to understandable by browser code
=> Most costly operation in front-end or enhancing the user experience is updating DOM.
=> React working on the concept to manipulate the DOM using javascript.

2. NPM (Node package manager)
=> package.json => configuration of npm
                => dependency package
                => npm take care of version of package
=> package-lock.json => keep track of exact version of every package
                     => save version of our dependencies package to package dependencies
=> NOTE => above both file we have to update on git so, all the servers are on the same track

3. npm vs npx
=> npm => installing packages
=> npx => executing the packages

4. Transitive dependencies
=> our project have some dependencies on other pakage and other package have thier own dependencies and that dependencies are transitive.

5. why we need import in React?
=> React is library so we have to import it first and it come from node-modules

6. Bundler ( Best => web-pack, parcel, vite)
=> Most important package in our project
    => Dev-build => provide localhost or local server
    => Local-server
    => HMR ( HOT module replacement ) => after save update local file
    => File watching algorithm
    => Faster build using catching
    => Image optimization
    => Minification => optmize js,html,css
    => Bundling => combine many file into single file
    => Compressing the code => Remove spaces and all
    => Code Spliting
    => Tree shaking => remove unused code and files
    => HTTPS => Provide https functionality
    => Different build for dev as well as for production

7. browser list => handle code in other browsers

8. JSX => Javascipt xml 
=> HTML like syntax
=> JSX is made for developer to easy understand while writing the code.
    => const heading = React.createElement("h1",{},"Hello world")
    => const heading = <h1>Hello world</h1>

    => Above both is same but browser didn't uderstand this only understand ECMASCRIPT
    => Above both return React object.
=> Before going to browser => Bundler transpiled 
=> All the bundlers are transpiled with the help of BABEL

9. Babel
=> Babel is javascript compiler as well as transpiler 
=> take jsx and converted into js engine understood language as well as react understood
=> Babel understand with the help of angular bracket (<,>)

10. Componets
=> Components are self contained reusable code
=> type => Class component => there own lifecycle 
                           => constructor, ComponentDidMount, ComponentDidUpdate, ComponentDidUnmount 
                           => for state management => this.state and this.setstate
        => functional component => No lifycle 
                                => we can achieve it with the help of react hooks 
                                => useState, UseEffect

11. useEffect
=> useEffect(()=>{},[]) => call initially as componentDidMount
=> useEffect(()=>,{},[xyz]) => call callback function when previous xyz and current have some changes

12. Hooks
=> useState => For managing state
=> useEffect => trigerring for some call back function
=> useContext => getting details for context
=> useReducer => updating resux state using actions
=> useSelector => Getting all details from store
=> useParams => getting details of params of route
=> useRefs => element refs
=> useMemo => for memoization
=> useCallback => return a memoize function

13. State management
=> State/props => handling component using own state and handle child component from parent using props
=> props drilling
=> context API => for overcome props drilling
=> data sharing between two siblings => using context api

14. State management tools
=> Redux/Zusland => Redux toolkit
=> It provides a centralized store to manage the entire state of an application.
=> Store intialization => Dispatching => Reducer => subscribe Selector => Render
=> Connfigure with the help of app store and useReducer and useSelector

15. Custom Hooks
=> Clean, maintable, Readable, re-usable
=> name => useXyz => Add prefix use for creating custom hooks
=> no need to return html => only required data
=> Code 
    function useFetch(url) {
      return { message: "Hello world" };
    }
    export default useFetch;

16. lazy Loading
=> code splitting, Chunking, suspense
=> Suspense => while loading component loader will show will the help of suspense
=> Code 
    const LazyComponent = React.lazy(() => import("./LazyComponent"));
    <Suspense fallback={<div>Loading...</div>}>
      <LazyComponent />
    </Suspense>;

17. Virtual Dom
=> Virtual DOM is replica of Real DOM
=> Re-concilation algorithm => that find the diffrence between real DOM vs Virtual DOM and update Real DOM with New Virtual DOM
=> React Fiber => it's comes with React 16 with optimize reconcilation algorithm
=> Diff Algorithm => With the help of react fiber find the diffrence between real dom vs virtual dom like git Diff

18. SSR vs CSR
=> SSR => Server Side Rendering => Send HTML using after creating on SERVER
=> CSR => Client Side Rendering => Sent Whole package of react/ Frontend application
=> Using SSR we can achieve SEO while updating the HTML
=> SSR ( OR NEXT.js is doing hydration before render the html) => for Better SEO

19. Performance
=> Shimmer UI
=> Lazy Loading
=> Asset Optimzation
=> JS Code, Css Code
=> Bundler level

20. SEO (Search Engine optimization)
=> Add Halmet Library
=> Meta/Graph/twitter Tags
=> Mobile responsive
=> SSL Certificate
=> 404 page
=> Image Optimization

21. Routing 
=> With the help of react-router-dom we can achive it.
=> (RBAC) => Role based access controller
=> check before routing this user have access or not.
=> query params, dynamic routing

22. Async Task
=> Api Calls
=> Events from browser APIs
=> fetch
=> Promises
=> Axios => using interceptor we can add auth key before api call

22. Testing
=> React testing (Unit testing)
=> Cypress (E2E testing)

23. Main Piller for Front-end using React
=> Re-usability
=> Modularity => Folder Structure
=> Testability
=> Readable

24. BOM (Browser Access Modal) vs DOM (Document Access modal)
=> BOM allows JavaScript to "talk to" the browser. like FRedirect, alert
=> document structure, style, and content

25. Shawdow DOM
=> Re-usable component => encapsulate internal structure and styling
=> prevent Css Style leakage
=> Simple Encapsulate DOM

24. Styling
tailwind.css
style-x

25. Security

26. Redux
=> Lifecycle => Dispatch(Action) => Reducer => Store => subscribe(Selector)
=> Global store

27. Cancel API call once called ?
=> YES, We can Abort with the help of AbortController
=> Code
    useEffect(() => {
      const controller = new AbortController();
      const signal = controller.signal;
      const fetchData = async () => {
        try {
          const response = await fetch("https://api.example.com/data", { signal });
          const result = await response.json();
          setData(result);
        } catch (err) {
          if (err.name === "AbortError") {
            console.log("Fetch aborted");
          } else {
            setError(err);
          }
        }
      };
      fetchData();
      return () => {
        controller.abort();
      };
    }, []);

28. Unmount Using functional component
=> Code
    useEffect(() => {
      console.log("Component mounted");
      return () => {
        console.log("Component unmounted");
      };
    }, []);
