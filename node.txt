1. What is Node js and Architecture?
=> Node is cross-platform and Javascript run-time enviroment.
=> It is built on Google Chrome’s V8 JavaScript engine
=> Architecture => To manage several concurrent clients => Node.js employs a “Single Threaded Event Loop” design.
=> Components of the Node.js Architecture:
a. Requests => User need to perform some action => 2 types of request => Blocking (complex) and Non-blocking (Simple)
b. NodeJs Server => Server accept all request => Process them => Return results
c. Event Queue => Storing requests => Pass them to the Event loop
d. Event loop => Recieve requests => send response to the client
e. Thread pool => Contain thread => Perform Operation 
=> For blocking requests, a single thread is assigned to the process for completing the task by using external resources.

2. What is the structure for Node js?

=> app.js
=> src => connections => MongoDB => connection.js
       => routes => routes.js
                 => user-routes.js
       => models => user-model.js
       => middlewares => custom-middlewares.js
       => controllers => user-controllers.js
       => services => authentication.js
       => validation => index.js
                     => schema.js

3. What is middleware and example?
=> middleware is a function 
=> In request and response cycle 
=> that function have access of request 
=> responading the object as well as pass to the next middleware
=> example => HTTP, static (pass image or html), JSON , urlencoded
=> custum middleware => Autherization, Authentication, Validation etc
=> Code
  const customMiddleware = (req,res,next)=>{
    // manipulation accordingly
    next()
}

4. Optimize nodeJs API
=> Always use of asynchronous functions
=> Optimize Database queries
=> Clustering => with pm2
=> Used HTTP2 instaead of HTTP (Multiplexing, Header compression, Server push, Binary Format)
=> Run tasks in Parallel => reduce letency and minimizes blocking opertaions.
=> Use Redis to catch 
=> Avoid session and cookies in APIs and send only APIs data
=> Use Error scripting with logging

5. Clustering 
=> Cluster allow to create multiple parallel instance of server or Scalling.

6. PM2
=> APM => Application process manager
=> performance monitering manager (CPU, Memory usage, response time, event loop letency etc)
=> Provide logger for all instance at same time
=> production process manager with in build load balancer
=> Zero downtime reload

7. Why do we use Logger?
=> Debugging and troubleshooting
=> Montering and Performance tuning
=> Error reporting and Alerting 
=> Security check-up

8. Tools for logger => PM2, winston

9. Level of Logger 
=> Info => General Info
=> WARN => Potential issue
=> Error => Functionality error
=> Debug => Debugging Information
=> Fatal => Crictical error that terminate application

10. CORS => Cross-Origin Resource Sharing
=> HTTP header based mechanism => Allow a server to indicate any origins (domain,scheme or ports)
=> 2 type => Simple Request
          => Pre-flight Request
=> Pre-flight => called before APIs => sent domain => return server additionally header to API's => main API's will called
=> example => web => if http:vishal.in
           => Not allowed => google.com, api.vishal.in, akshay.in, => Not allowed

11. Rate Limiting
=> handle DOS attack (Denial of service) => where high volume of traffic.
=> For Rate limiting we can configure multiple package for that
=> express-rate-limit, rate-limiter-flexible, express-rate-limit-redis.

12. Security
=> Regular security audits and testing
=> Impliment Rate limit and IP whitelisting
=> Secure Session management
=> Enabled HTTPS
=> Prevent Injection Attack => use ORMs
=> Use JWT and Auth0 for Autherization and Authentication
=> Keep dependencies update

13. Api Code
=> Sucessfully (Most used)
=> Get => 200
=> Post => 201 => Created
=> Put => 200
=> Patch => 200
         => 204 => No Content
=> Delete => 204

=> Error
=> 404 => Not Found
=> 400 => Bad Request
=> 401 => Unauthorized
=> 403 => Forbidden
=> 502 => Bad gateway
=> 504 => Gateway Timeout

=> Code => res.status(200).json({ message: "Xyz });
